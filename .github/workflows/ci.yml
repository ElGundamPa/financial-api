name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, deploy/vercel ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Debug environment
      run: |
        echo "=== ENVIRONMENT DEBUG ==="
        python --version
        which python
        pip list
        echo "=== FILES DEBUG ==="
        ls -la tests/
        echo "=== PYTHON PATH ==="
        python -c "import sys; print('\\n'.join(sys.path))"
    
    - name: Test diagnostic
      run: |
        echo "=== RUNNING DIAGNOSTIC TESTS ==="
        python -m pytest tests/test_diagnostic.py -v -s
      continue-on-error: true
    
    - name: Test minimal first
      run: |
        echo "=== RUNNING MINIMAL TESTS ==="
        python -m pytest tests/test_minimal.py -v --tb=short
      continue-on-error: true
    
    - name: Test basic with debug
      run: |
        echo "=== RUNNING BASIC TESTS ==="
        python -m pytest tests/test_basic.py -v --tb=long --maxfail=1
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        pip install flake8 black isort
    
    - name: Run linting
      run: |
        # Solo verificar archivos del proyecto, no dependencias
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only .

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: financial-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
